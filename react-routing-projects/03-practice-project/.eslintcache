[{"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\index.js":"1","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\App.js":"2","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\layout\\Layout.js":"3","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\layout\\MainHeader.js":"4","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\pages\\AllQuotes.js":"5","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\quotes\\QuoteList.js":"6","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\quotes\\QuoteItem.js":"7","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\pages\\NewQuote.js":"8","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\quotes\\QuoteForm.js":"9","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\UI\\LoadingSinner.js":"10","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\pages\\QuoteDetail.js":"11","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\store\\index.js":"12","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\store\\quote-slice.js":"13","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\store\\quote-actions.js":"14","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\quotes\\NoQuotesFound.js":"15","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\quotes\\HighlightedQuote.js":"16","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\comments\\Comments.js":"17","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\comments\\CommentForm.js":"18"},{"size":392,"mtime":1667601002229,"results":"19","hashOfConfig":"20"},{"size":689,"mtime":1667766877584,"results":"21","hashOfConfig":"20"},{"size":261,"mtime":1667055284383,"results":"22","hashOfConfig":"20"},{"size":507,"mtime":1667048533268,"results":"23","hashOfConfig":"20"},{"size":214,"mtime":1667055011081,"results":"24","hashOfConfig":"20"},{"size":1702,"mtime":1667751553524,"results":"25","hashOfConfig":"20"},{"size":976,"mtime":1667749475834,"results":"26","hashOfConfig":"20"},{"size":144,"mtime":1667763948760,"results":"27","hashOfConfig":"20"},{"size":2380,"mtime":1668628074152,"results":"28","hashOfConfig":"20"},{"size":174,"mtime":1667594018957,"results":"29","hashOfConfig":"20"},{"size":925,"mtime":1668633594981,"results":"30","hashOfConfig":"20"},{"size":208,"mtime":1667658477590,"results":"31","hashOfConfig":"20"},{"size":1519,"mtime":1668633092775,"results":"32","hashOfConfig":"20"},{"size":7043,"mtime":1668633482015,"results":"33","hashOfConfig":"20"},{"size":332,"mtime":1667751370911,"results":"34","hashOfConfig":"20"},{"size":333,"mtime":1667764250248,"results":"35","hashOfConfig":"20"},{"size":1053,"mtime":1668633611739,"results":"36","hashOfConfig":"20"},{"size":1149,"mtime":1668633607810,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"4s7fqg",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\index.js",[],["77","78"],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\App.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\layout\\Layout.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\layout\\MainHeader.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\pages\\AllQuotes.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\quotes\\QuoteList.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\quotes\\QuoteItem.js",["79"],"\r\nimport { Link } from 'react-router-dom';\r\nimport classes from './QuoteItem.module.css';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteQuote, fetchQuotes } from '../../store/quote-actions';\r\n\r\n\r\nconst QuoteItem = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const deleteQuoteHandler = () => {\r\n        \r\n        dispatch(deleteQuote({\r\n            id: props.id\r\n        }))\r\n        \r\n    }\r\n\r\n    return <div className={classes.quoteItem}>\r\n        <div className={classes.textWrapper}>\r\n            <div className={classes.title}> {props.title} </div>\r\n            <div className={classes.description}> {props.description} </div>\r\n        </div>\r\n        <div className={classes.buttonWrapper}>\r\n            <Link className={classes.btn} to={`/quotes/${props.id}`} >View Fullscreen</Link>\r\n            <button className={classes.btn} onClick={deleteQuoteHandler}>Delete Quote </button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default QuoteItem;","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\pages\\NewQuote.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\quotes\\QuoteForm.js",["80","81"],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\UI\\LoadingSinner.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\pages\\QuoteDetail.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\store\\index.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\store\\quote-slice.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\store\\quote-actions.js",["82"],"import { quoteActions } from \"./quote-slice\";\r\n\r\nconst DATABASE_LINK = 'https://react-routing-42d52-default-rtdb.firebaseio.com';\r\n\r\nexport const fetchQuotes = () => {\r\n\r\n    return async (dispatch) => {\r\n\r\n        dispatch(quoteActions.setStatus({\r\n            status: 'pending'\r\n        }))\r\n\r\n        const arrayOfQuotes = [];\r\n\r\n        const fetchQuotes = async () => {\r\n            \r\n            const response = await fetch (`${DATABASE_LINK}/quotes.json`, {\r\n                    method: 'GET'\r\n                }\r\n            );\r\n\r\n            if(!response.ok) {\r\n                throw new Error('Failed to fetch data!');\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n\r\n        }\r\n\r\n\r\n        try {\r\n\r\n            const data = await fetchQuotes();\r\n\r\n\r\n            for(const key in data) {\r\n                const quoteData = {\r\n                    id: key,\r\n                    ...data[key]\r\n                }\r\n                arrayOfQuotes.push(quoteData);\r\n            }\r\n\r\n            dispatch(quoteActions.replaceQuotes({\r\n                quotes: arrayOfQuotes || []\r\n            }))\r\n\r\n            dispatch(quoteActions.setStatus({\r\n                status: 'completed'\r\n            }))\r\n            \r\n        } catch(error) {\r\n\r\n            dispatch(quoteActions.setStatus({\r\n                status: 'completed'\r\n            }))\r\n\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const addQuote = (quoteData) => {\r\n    return async (dispatch) => {\r\n\r\n        dispatch(quoteActions.setStatus({\r\n            status: 'pending'\r\n        }))\r\n\r\n        const sendRequest = async () => {\r\n            const response = await fetch(`${DATABASE_LINK}/quotes.json`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    id: quoteData.id,\r\n                    quoteId: quoteData.quoteId,\r\n                    author: quoteData.author,\r\n                    description: quoteData.description\r\n                })\r\n            });\r\n\r\n            if(!response.ok) {\r\n                throw new Error('Failed to send data!')\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        }\r\n\r\n        try {\r\n            \r\n            await sendRequest();\r\n\r\n            dispatch(quoteActions.addQuoteItem( {\r\n                id: quoteData.id,\r\n                author: quoteData.author,\r\n                description: quoteData.description\r\n            }))\r\n\r\n            dispatch(quoteActions.setStatus({\r\n                status: 'completed'\r\n            }))\r\n\r\n        } catch(error) {\r\n\r\n            \r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const deleteQuote = (deleteTarget) => {\r\n    return async (dispatch) => {\r\n\r\n        dispatch(quoteActions.setStatus({\r\n            status: 'pending'\r\n        }))\r\n\r\n        \r\n        const sendRequest = async () => {\r\n\r\n            const response = await fetch (`${DATABASE_LINK}/quotes/${deleteTarget.id}.json`, {\r\n                method: 'DELETE',\r\n            })\r\n            \r\n            if(!response.ok) {\r\n                throw new Error('Failed to update data!');\r\n            }\r\n\r\n            if (response.status >= 400 && response.status < 600) {\r\n                throw new Error(\"Bad response from server\");\r\n            }\r\n\r\n        }\r\n\r\n        try {\r\n\r\n            await sendRequest();\r\n\r\n            dispatch(quoteActions.deleteQuoteItem({\r\n                id: deleteTarget.id\r\n            }));\r\n\r\n            dispatch(quoteActions.setStatus({\r\n                status: 'completed'\r\n            }))\r\n    \r\n            \r\n        } catch(error) {\r\n\r\n            dispatch(quoteActions.setStatus({\r\n                status: 'completed'\r\n            }))\r\n\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const getSignleQuote = (quoteId) => {\r\n    return async (dispatch) => {\r\n        const sendRequest = async () => {\r\n\r\n            const response = await fetch(`${DATABASE_LINK}/quotes/${quoteId}.json`);\r\n\r\n            if(!response.ok) {\r\n                throw new Error ('Fialed to fetch data!');\r\n            }\r\n\r\n            const data = response.json();\r\n\r\n            return data;\r\n        }\r\n\r\n        try {\r\n\r\n            const quote = await sendRequest();\r\n\r\n            const quoteData = {\r\n                id: quoteId,\r\n                ...quote\r\n            }\r\n\r\n            dispatch(quoteActions.updateSpecificQuote(quoteData));\r\n\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport const fetchComments = () => {\r\n    return async (dispatch) => {\r\n        dispatch(quoteActions.setStatus({\r\n            status: 'pending'\r\n        }));\r\n\r\n        const sendRequest = async () => {\r\n            const response = await fetch(`${DATABASE_LINK}/comments.json`);\r\n\r\n            if(!response.ok) {\r\n                throw new Error('Failed to fetch commnets!');\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n\r\n            return data;\r\n        }\r\n\r\n        try {\r\n\r\n            const commentData = await sendRequest();\r\n            \r\n            const arrayOfComments = [];\r\n\r\n            for(const key in commentData) {\r\n                const commentData = {\r\n                    id: key,\r\n                    ...commentData[key]\r\n                }\r\n                arrayOfComments.push(commentData);\r\n            }\r\n\r\n            dispatch(quoteActions.replaceComments({\r\n                comments: arrayOfComments || []\r\n            }))\r\n\r\n            dispatch(quoteActions.setStatus({\r\n                status: 'completed'\r\n            }));\r\n            \r\n\r\n        } catch(error) {\r\n            console.log(error);\r\n\r\n            dispatch(quoteActions.setStatus({\r\n                status: 'completed'\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const addComment = (commentText, quoteId) => {\r\n    return async (dispatch) => {\r\n\r\n        dispatch(quoteActions.setStatus({\r\n            status: 'pending'\r\n        }));\r\n\r\n\r\n        const sendRequest = async () => {\r\n            const response = fetch(`${DATABASE_LINK}/comments.json`, {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    quoteId: quoteId,\r\n                    text: commentText\r\n                })\r\n            })\r\n\r\n            if(!response.ok) {\r\n                throw new Error('Failed to send data!');\r\n            }\r\n            \r\n            const data = (await response).json();\r\n\r\n            return data;\r\n        }\r\n\r\n        try {\r\n            await sendRequest();\r\n\r\n            dispatch(quoteActions.addComment({\r\n                quoteId: quoteId,\r\n                text: commentText\r\n            }));\r\n\r\n            dispatch(quoteActions.setStatus({\r\n                status: 'completed'\r\n            }));\r\n            \r\n        } catch(error) {\r\n            console.log(error);\r\n\r\n            dispatch(quoteActions.setStatus({\r\n                status: 'completed'\r\n            }));\r\n        }\r\n    }\r\n}","D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\quotes\\NoQuotesFound.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\quotes\\HighlightedQuote.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\comments\\Comments.js",[],"D:\\React-course\\01-starting-setup\\react-routing-projects\\03-practice-project\\src\\components\\comments\\CommentForm.js",["83"],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":5,"column":23,"nodeType":"90","messageId":"91","endLine":5,"endColumn":34},{"ruleId":"88","severity":1,"message":"92","line":1,"column":10,"nodeType":"90","messageId":"91","endLine":1,"endColumn":19},{"ruleId":"88","severity":1,"message":"93","line":4,"column":10,"nodeType":"90","messageId":"91","endLine":4,"endColumn":14},{"ruleId":"94","severity":1,"message":"95","line":228,"column":24,"nodeType":"90","messageId":"96","endLine":228,"endColumn":35},{"ruleId":"88","severity":1,"message":"97","line":5,"column":22,"nodeType":"90","messageId":"91","endLine":5,"endColumn":35},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'fetchQuotes' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Link' is defined but never used.","no-use-before-define","'commentData' was used before it was defined.","usedBeforeDefined","'fetchComments' is defined but never used.","no-global-assign","no-unsafe-negation"]